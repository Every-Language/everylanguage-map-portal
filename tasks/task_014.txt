# Task ID: 14
# Title: Create Custom Audio Player Component
# Status: in-progress
# Dependencies: 6
# Priority: medium
# Description: Build a custom HTML5 audio player with precise timestamp controls for verse marking.
# Details:
Create a custom audio player as a React functional component using HTML5 Audio API with useRef for DOM manipulation. Implement a compound component pattern for modularity with separate sub-components for controls, time display, and progress bar.

Core features:
- Controls: play/pause, skip Â±5s, playback speed (0.5x-4x)
- Time display: current time, total duration, clickable progress bar for seeking
- Keyboard shortcuts: spacebar (play/pause), arrow keys (skip), +/- (volume)
- Playback speed options: 0.5x, 0.75x, 1x, 1.25x, 1.5x, 2x, 3x, 4x

Technical implementation:
- Use React hooks (useState, useEffect, useRef, useCallback) for state management
- Implement event listeners for audio events (timeupdate, ended, loadedmetadata)
- Add error handling for audio loading and playback issues
- Ensure proper cleanup of event listeners on unmount
- Support multiple audio formats with fallback handling

File structure:
- Create AudioPlayer component in src/shared/design-system/components/
- Add AudioPlayer to design system exports
- Create supporting types and interfaces
- Add to component demo page for testing

Style with Tailwind CSS for a consistent look. Make the player responsive for different screen sizes.

# Test Strategy:
Unit tests for component rendering and state management using Jest and React Testing Library. Integration tests for keyboard shortcuts and controls. Accessibility testing with jest-axe and screen readers. Cross-browser compatibility testing in Chrome, Firefox, and Safari. Responsive design testing on different screen sizes. Verify that all player controls function correctly and timestamp precision for verse marking.

# Subtasks:
## 14.1. Set up component structure and file organization [completed]
### Dependencies: None
### Description: Create the AudioPlayer component in the design system directory with proper file structure and exports.
### Details:


## 14.2. Implement core audio functionality with React hooks [completed]
### Dependencies: None
### Description: Set up useRef for audio element and implement basic state management for play/pause, time tracking, and event listeners.
### Details:


## 14.3. Create sub-components for controls, time display, and progress bar [completed]
### Dependencies: None
### Description: Build modular sub-components following the compound component pattern for better organization and reusability.
### Details:


## 14.4. Implement playback speed controls [completed]
### Dependencies: None
### Description: Add dropdown with multiple playback speed options (0.5x, 0.75x, 1x, 1.25x, 1.5x, 2x, 3x, 4x).
### Details:


## 14.5. Add keyboard navigation and shortcuts [completed]
### Dependencies: None
### Description: Implement keyboard event handlers for spacebar (play/pause), arrow keys (skip), and +/- (volume control).
### Details:


## 14.6. Implement accessibility features [completed]
### Dependencies: None
### Description: Add ARIA labels, ensure keyboard support, and optimize for screen reader compatibility.
### Details:


## 14.7. Style component with Tailwind CSS [completed]
### Dependencies: None
### Description: Apply consistent styling using Tailwind CSS and ensure responsive design for different screen sizes.
### Details:


## 14.8. Write tests for the component [in-progress]
### Dependencies: None
### Description: Create unit tests for rendering and state management, integration tests for controls and keyboard shortcuts, and accessibility tests using Jest, React Testing Library, and jest-axe.
### Details:


## 14.9. Add error handling and format support [completed]
### Dependencies: None
### Description: Implement error handling for audio loading/playback issues and support for multiple audio formats with fallbacks.
### Details:


## 14.10. Add component to demo page [completed]
### Dependencies: None
### Description: Integrate the AudioPlayer component into the design system demo page for testing and documentation.
### Details:


## 14.11. Create Radix UI-based Slider component [completed]
### Dependencies: None
### Description: Implement a reusable Slider component in src/shared/design-system/components/Slider.tsx with volume and default variants, and add to design system exports.
### Details:


## 14.12. Implement volume control with mute/unmute functionality [completed]
### Dependencies: None
### Description: Add volume slider with mute toggle button and keyboard shortcut (M key) for mute/unmute functionality.
### Details:


## 14.13. Add loading states with spinner indicator [completed]
### Dependencies: None
### Description: Implement visual feedback during audio loading with spinner indicator to improve user experience.
### Details:


## 14.14. Add dark mode support [completed]
### Dependencies: None
### Description: Ensure the AudioPlayer component works properly in dark mode with appropriate styling.
### Details:


## 14.15. Implement customizable control visibility [completed]
### Dependencies: None
### Description: Add options to customize visibility for each control group to support different use cases (full-featured, minimal, progress-only).
### Details:


## 14.16. Enhance demo page with multiple variants [completed]
### Dependencies: None
### Description: Update the demo page with multiple AudioPlayer variants, keyboard shortcuts documentation, and event handler examples.
### Details:


## 14.17. Perform manual testing and cross-browser compatibility [completed]
### Dependencies: None
### Description: Test all features in different browsers, verify keyboard shortcuts, and ensure accessibility compliance.
### Details:


## 14.18. Prepare for integration with verse marking functionality [completed]
### Dependencies: None
### Description: Ensure the AudioPlayer component is ready for integration with verse marking functionality (Task 15).
### Details:


## 14.19. Document manual testing results [completed]
### Dependencies: None
### Description: Document comprehensive testing results including functional testing, browser compatibility, and accessibility testing.
### Details:


## 14.20. Document integration points for verse marking [completed]
### Dependencies: None
### Description: Document API interface for verse marking including onTimeUpdate callback, seek functionality, current time access, and event handlers.
### Details:


## 14.21. Final review before Task 15 integration [pending]
### Dependencies: None
### Description: Conduct a final code review and ensure all documentation is up-to-date before proceeding with integration with the verse marking modal.
### Details:


## 14.22. Set up Jest and React Testing Library [pending]
### Dependencies: None
### Description: Configure Jest and React Testing Library for component testing if not already set up. Add jest-axe for accessibility testing.
### Details:


## 14.23. Create test files for AudioPlayer and Slider components [pending]
### Dependencies: None
### Description: Create comprehensive test files covering rendering, state management, user interactions, and accessibility.
### Details:


## 14.24. Verify timestamp precision for verse marking [pending]
### Dependencies: None
### Description: Test and ensure audio seeking accuracy and timestamp precision for fine-grained control needed for verse boundary marking.
### Details:


